import { UploadManagerBase } from "./UploadManagerBase";
import { UploadSourceProcessedBrowser, UploadSourceProcessedWorker } from "./model/UploadSourceProcessed";
import { PreUploadInfo } from "./model/PreUploadInfo";
import { UploadPart } from "../public/shared/generated";
import { UploadManagerParams, UploadSource } from "../public/shared/CommonTypes";
type BrowserOrWorkerUploadSource = UploadSourceProcessedBrowser | UploadSourceProcessedWorker;
/**
 * The "browser" and "worker" runtimes support the same input types, but the former uses XHR and the latter uses Fetch.
 */
export declare abstract class UploadManagerBrowserWorkerBase extends UploadManagerBase<BrowserOrWorkerUploadSource, undefined> {
    protected processUploadSource(data: UploadSource): BrowserOrWorkerUploadSource;
    protected getPreUploadInfoPartial(_request: UploadManagerParams, data: BrowserOrWorkerUploadSource): Partial<PreUploadInfo> & {
        size: number;
    };
    protected preUpload(_source: BrowserOrWorkerUploadSource): undefined;
    protected postUpload(_init: undefined): Promise<void>;
    protected getRequestBody(part: UploadPart, blob: BrowserOrWorkerUploadSource): Blob | ArrayBuffer;
}
export {};
