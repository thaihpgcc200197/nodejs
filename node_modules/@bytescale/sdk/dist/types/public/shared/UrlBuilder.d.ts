import { UrlBuilderParams } from "./UrlBuilderTypes";
export declare class UrlBuilder {
    /**
     * Builds a URL to either a raw file or a transformed file.
     *
     * Example 1) Getting a publicly-accessible raw file URL:
     *
     *   new UrlBuilder().url({ accountId: "1234abc", filePath: "/example.jpg" })
     *
     * Example 2) Getting a publicly-accessible image URL, resized to 500x500:
     *
     *   new UrlBuilder().url({ accountId: "1234abc", filePath: "/example.jpg", options: { transformation: { type: "image", params: { w: 500, h: 500, fit: "crop" } } } })
     *
     * Example 3) Getting a privately-accessible image URL, resized to 500x500 (requires 'AuthManager.beginAuthSession' to be called before accessing the URL):
     *
     *   new UrlBuilder().url({ accountId: "1234abc", filePath: "/example.jpg", options: { transformation: { type: "image", params: { w: 500, h: 500, fit: "crop" } }, auth: true } })
     *
     * Example 4) Getting a publicly-accessible image URL, resized using a transformation preset called "thumbnail" that was created manually in the Bytescale Dashboard:
     *
     *   new UrlBuilder().url({ accountId: "1234abc", filePath: "/example.jpg", options: { transformation: { type: "preset", preset: "thumbnail" } } })
     */
    static url(params: UrlBuilderParams): string;
    private static raw;
    private static transformation;
    private static getBaseUrl;
    private static getCommonTransformationQueryParams;
    private static getCommonQueryParams;
    /**
     * Masks the querystring params per the 'keys' array.
     *
     * Order sensitive: querystring params will appear per the order of the 'keys' array.
     */
    private static makeQueryParams;
    private static getTransformationParams;
    private static addQueryParams;
}
