/**
 * @bytescale/api
 * Bytescale API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@bytescale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import type { AsyncResponse, CopyFolderBatchRequest, CopyFolderRequest, DeleteFolderBatchRequest, DeleteFolderRequest, FolderDetails, ListFolderResponse, PutFolderRequest } from "../models";
export interface CopyFolderOperationParams {
    accountId: string;
    copyFolderRequest: CopyFolderRequest;
}
export interface CopyFolderBatchOperationParams {
    accountId: string;
    copyFolderBatchRequest: CopyFolderBatchRequest;
}
export interface DeleteFolderOperationParams {
    accountId: string;
    deleteFolderRequest: DeleteFolderRequest;
}
export interface DeleteFolderBatchOperationParams {
    accountId: string;
    deleteFolderBatchRequest: DeleteFolderBatchRequest;
}
export interface GetFolderDetailsParams {
    accountId: string;
    folderPath: string;
}
export interface ListFolderParams {
    accountId: string;
    folderPath: string;
    cursor?: string;
    dryRun?: boolean;
    includeFiles?: boolean;
    includeOverriddenStorage?: boolean;
    includePhysicalFolders?: boolean;
    includeVirtualFolders?: boolean;
    limit?: number;
    recursive?: boolean;
}
export interface PutFolderOperationParams {
    accountId: string;
    putFolderRequest: PutFolderRequest;
}
export declare class FolderApi extends runtime.BaseAPI {
    /**
     * Copies a folder asynchronously.  You can use ListFolder to preview the operation using the `dryRun` parameter.
     */
    copyFolder(params: CopyFolderOperationParams): Promise<AsyncResponse>;
    /**
     * Copies multiple folders asynchronously.  You can use ListFolder to preview the operation using the `dryRun` parameter.
     */
    copyFolderBatch(params: CopyFolderBatchOperationParams): Promise<AsyncResponse>;
    /**
     * Deletes a folder asynchronously.  You can use ListFolder to preview the operation using the `dryRun` parameter.  *External storage:* external files are only deleted when you directly delete a file or subfolder of a folder that has external storage configured. If you delete the folder itself, only the mapping is removed.  Requires a `secret_*` API key. Alternatively, you can use a `public_*` API key and JWT-based auth.
     */
    deleteFolder(params: DeleteFolderOperationParams): Promise<AsyncResponse>;
    /**
     * Deletes multiple folders asynchronously.  You can use ListFolder to preview the operation using the `dryRun` parameter.  *External storage:* external files are only deleted when you directly delete a file or subfolder of a folder that has external storage configured. If you delete the folder itself, only the mapping is removed.  Requires a `secret_*` API key. Alternatively, you can use a `public_*` API key and JWT-based auth.
     */
    deleteFolderBatch(params: DeleteFolderBatchOperationParams): Promise<AsyncResponse>;
    /**
     * Gets the full details (e.g. permission, storage layer, etc.) for a folder.  Returns an empty object if no settings have been configured for this folder.  Requires a `secret_*` API key. Alternatively, you can use a `public_*` API key and JWT-based auth.
     */
    getFolderDetails(params: GetFolderDetailsParams): Promise<FolderDetails>;
    /**
     * Lists the folder\'s contents.  The result may be paginated: subsequent pages can be requested by passing the ```cursor``` from the response into the next request.  Pagination is complete when the response includes `isPaginationComplete=true`.
     */
    listFolder(params: ListFolderParams): Promise<ListFolderResponse>;
    /**
     * Creates or updates the folder specified by the `folderPath`.  If the folder\'s ancestors do not exist, they will be created automatically (with empty FolderSettings).  Note: you don\'t need to create folders before uploading files to them.  Requires a `secret_*` API key. Alternatively, you can use a `public_*` API key and JWT-based auth.
     */
    putFolder(params: PutFolderOperationParams): Promise<FolderDetails>;
}
