import { UploadManagerBase } from "../../private/UploadManagerBase";
import { UploadSourceProcessedNode } from "../../private/model/UploadSourceProcessed";
import { NodeChunkedStream } from "../../private/NodeChunkedStream";
import { PreUploadInfo } from "../../private/model/PreUploadInfo";
import { UploadPart } from "../shared/generated";
import { AddCancellationHandler } from "../../private/model/AddCancellationHandler";
import { UploadManagerParams, UploadSource } from "../shared/CommonTypes";
type UploadManagerNodeInit = undefined | {
    chunkedStream: NodeChunkedStream;
    chunkedStreamPromise: Promise<void>;
};
export declare class UploadManager extends UploadManagerBase<UploadSourceProcessedNode, UploadManagerNodeInit> {
    protected processUploadSource(data: UploadSource): UploadSourceProcessedNode;
    protected getPreUploadInfoPartial(request: UploadManagerParams, data: UploadSourceProcessedNode): Partial<PreUploadInfo> & {
        size: number;
    };
    protected preUpload(source: UploadSourceProcessedNode): UploadManagerNodeInit;
    protected postUpload(init: UploadManagerNodeInit): Promise<void>;
    protected doPutUploadPart(part: UploadPart, contentLength: number, source: UploadSourceProcessedNode, onProgress: (bytesSentDelta: number) => void, addCancellationHandler: AddCancellationHandler): Promise<{
        etag: string | undefined;
        status: number;
    }>;
    private coerceRequestBody;
    private sliceDataForRequest;
}
export {};
