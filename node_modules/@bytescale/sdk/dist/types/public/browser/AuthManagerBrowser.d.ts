import { AuthManagerInterface, BeginAuthSessionParams } from "../../private/model/AuthManagerInterface";
import { AuthSwSetConfigDto } from "../../private/dtos/AuthSwSetConfigDto";
import { ServiceWorkerUtils } from "../../private/ServiceWorkerUtils";
declare class AuthManagerImpl implements AuthManagerInterface {
    private readonly serviceWorkerUtils;
    private readonly authSessionMutex;
    private readonly serviceWorkerScriptFieldName;
    private readonly contentType;
    private readonly contentTypeJson;
    private readonly contentTypeText;
    private readonly minJwtTtlSeconds;
    private readonly retryAuthAfterErrorSeconds;
    private readonly refreshBeforeExpirySeconds;
    private readonly scheduler;
    constructor(serviceWorkerUtils: ServiceWorkerUtils<AuthSwSetConfigDto>);
    isAuthSessionActive(): boolean;
    isAuthSessionReady(): boolean;
    beginAuthSession(params: BeginAuthSessionParams): Promise<void>;
    endAuthSession(): Promise<void>;
    private refreshAccessToken;
    private getAccessTokenUrl;
    private getCdnUrl;
    private deleteAccessToken;
    private setAccessToken;
    private getAccessToken;
}
/**
 * Alternative way of implementing a static class (i.e. all methods static). We do this so we can use a interface on the class (interfaces can't define static methods).
 */
export declare const AuthManager: AuthManagerImpl;
export {};
